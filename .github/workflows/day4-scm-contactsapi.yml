name: day4-scm-contactsapi

on:
  push:
    branches:
      - master
    paths:
      - day4/apps/infrastructure/bicep/contacts/**
      - day4/apps/dotnetcore/scm/**
      - .github/workflows/day4-scm-contactsapi.yml
  pull_request:
    branches:
      - master
    paths:
      - day4/apps/infrastructure/bicep/contacts/**
      - day4/apps/dotnetcore/scm/**
      - .github/workflows/day4-scm-contactsapi.yml

  workflow_dispatch:

env:
  API_PACKAGE_NAME: "scmcontactsapi.zip"
  BICEP_FILE_NAME: "contactsmain.bicep"

jobs:
  build-api:
    if: github.repository == 'azuredevcollege/trainingdays'
    runs-on: ubuntu-latest
    env:
      API_PACKAGE_PATH: "publish/scmcontactsapi"
      API_PROJECT_PATH: "./day4/apps/dotnetcore/Scm/Adc.Scm.Api"
      NEED_DEPLOY: ${{ (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Use Cache
        uses: actions/cache@v2
        with:
          path: "~/.nuget/packages"
          key: ${{ runner.os }}-nuget-${{ hashFiles('./day4/apps/dotnetcore/Scm/Adc.Scm.Api/packages.lock.json') }}

      - name: Build and publish SCM ContactsAPI
        working-directory: ${{ env.API_PROJECT_PATH }}
        run: |
          dotnet restore --locked-mode
          dotnet build --configuration Release
          dotnet publish -c Release -o './${{ env.API_PACKAGE_PATH }}'

      - name: Zip SCM ContactsAPI
        working-directory: ${{ env.API_PROJECT_PATH }}/${{ env.API_PACKAGE_PATH }}
        run: |
          zip -r ${{ env.API_PACKAGE_NAME }} ./*

      - name: Archive dotnetcore package artifacts
        uses: actions/upload-artifact@v2
        if: env.NEED_DEPLOY == 'true'
        with:
          name: drop
          path: "${{ env.API_PROJECT_PATH }}/${{ env.API_PACKAGE_PATH }}/${{ env.API_PACKAGE_NAME }}"
          if-no-files-found: error
          retention-days: 30

  build-bicep:
    if: github.repository == 'azuredevcollege/trainingdays'
    runs-on: ubuntu-latest
    env:
      BICEP_MODULE_PATH: "./day4/apps/infrastructure/bicep/contacts/"
      BICEP_FILE_PATH: "./day4/apps/infrastructure/bicep/contacts/contactsmain.bicep"
      NEED_DEPLOY: ${{ (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Transpile bicep files
        run: az bicep build -f ${{ env.BICEP_FILE_PATH }}

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        if: env.NEED_DEPLOY == 'true'
        with:
          name: drop
          path: ${{ env.BICEP_MODULE_PATH }}
          retention-days: 30

  deploy-to-dev:
    if: (github.repository == 'azuredevcollege/trainingdays') && ((github.event_name == 'push') || (github.event_name == 'workflow_dispatch'))
    runs-on: ubuntu-latest
    environment: day4-scm-dev
    needs: [build-bicep, build-api]
    env:
      RESOURCE_GROUP_NAME: rg-scm-devday4
      RESOURCE_GROUP_LOCATION: westeurope
      ENV_NAME: devd4

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Create ResourceGroup name
        id: createResourceGroupName
        run: echo "::set-output name=name::${{ env.RESOURCE_GROUP_NAME }}-${{ env.GITHUB_REPOSITORY_OWNER_PART }}"

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: drop

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ResourceGroup
        run: >
          az group create
          -l ${{ env.RESOURCE_GROUP_LOCATION }}
          -n ${{ steps.createResourceGroupName.outputs.name }}

      - name: Deploy infrastructure to dev environment
        uses: azure/arm-deploy@v1
        id: infrastructure
        with:
          failOnStdErr: false
          resourceGroupName: ${{ steps.createResourceGroupName.outputs.name }}
          template: ./${{ env.BICEP_FILE_NAME }}
          parameters: >
            env=${{ env.ENV_NAME }} 
            sqlUserPwd=${{ secrets.SQL_PASSWORD }}

      - name: Deploy SCM Contacts API
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.infrastructure.outputs.contactsApiWebAppName }}
          package: ./${{ env.API_PACKAGE_NAME }}

  deploy-to-test:
    if: (github.repository == 'azuredevcollege/trainingdays') && ((github.event_name == 'push') || (github.event_name == 'workflow_dispatch'))
    runs-on: ubuntu-latest
    environment: day4-scm-test
    needs: deploy-to-dev
    env:
      RESOURCE_GROUP_NAME: rg-scm-testday4
      RESOURCE_GROUP_LOCATION: westeurope
      ENV_NAME: testd4

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Create ResourceGroup name
        id: createResourceGroupName
        run: echo "::set-output name=name::${{ env.RESOURCE_GROUP_NAME }}-${{ env.GITHUB_REPOSITORY_OWNER_PART }}"

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: drop

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ResourceGroup
        run: >
          az group create
          -l ${{ env.RESOURCE_GROUP_LOCATION }}
          -n ${{ steps.createResourceGroupName.outputs.name }}

      - name: Deploy infrastructure to test environment
        uses: azure/arm-deploy@v1
        id: infrastructure
        with:
          failOnStdErr: false
          resourceGroupName: ${{ steps.createResourceGroupName.outputs.name }}
          template: ./${{ env.BICEP_FILE_NAME }}
          parameters: >
            env=${{ env.ENV_NAME }} 
            sqlUserPwd=${{ secrets.SQL_PASSWORD }}

      - name: Deploy SCM Contacts API
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.infrastructure.outputs.contactsApiWebAppName }}
          package: ./${{ env.API_PACKAGE_NAME }}
